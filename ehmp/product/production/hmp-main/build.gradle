// importing classes for running runSplitCSS
import com.phloc.css.ECSSVersion
import com.phloc.css.decl.CSSImportRule
import com.phloc.css.decl.CSSStyleRule
import com.phloc.css.decl.CascadingStyleSheet
import com.phloc.css.decl.ICSSTopLevelRule
import com.phloc.css.reader.CSSReader
import com.phloc.css.writer.CSSWriter
import com.yahoo.platform.yui.compressor.JavaScriptCompressor
import org.mozilla.javascript.ErrorReporter

import java.nio.charset.Charset

buildscript {
    repositories {
        // mavenLocal()
        jcenter()
        maven { url "http://repository.springsource.com/maven/bundles/release" }
        maven { url "http://repository.springsource.com/maven/bundles/external" }
        maven { url "http://repository.jboss.org/maven2/" }
        maven { url "http://download.java.net/maven/2/" }
        maven { url "https://repository.jboss.org/nexus/content/groups/public" }
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url "http://repo.phloc.com/maven2" }
        maven { url "http://version99.qos.ch" }
        mavenCentral()

        /*
        maven {
            url "http://hmpcode.vainnovations.us:8080/nexus/content/groups/public"
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
        */
    }

    dependencies {
        // TODO find out groovy version
        // classpath 'org.codehaus.groovy:groovy-all:2.2.0'
        classpath localGroovy()

        classpath "com.fasterxml.jackson.core:jackson-databind:$versions.jacksonVersion"
        // TODO Can't find snapshot version
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
        // classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0.1-SNAPSHOT'

        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.2'
        classpath 'com.phloc:phloc-css:3.7.0'
        classpath group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.3.6'

        // TODO cannot add compile project dependency.
        // classpath project(':production:vista-support:vista-rpc-client')
        // classpath group: 'gov.va.hmp', name: 'vista-rpc-client', version: '0.9.14', classifier: 'jar-with-dependencies'
    }
}

description = 'Health Management Platform Web Application'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'rebel'
// apply plugin: 'groovy'
apply plugin: 'maven'

group = 'gov.va.hmp'
version = '1.2.0'

ext {
    hmpPortHttp = 8080
    hmpPortHttps = 8443

    hmpHomeDir = "${buildDir}/hmp-home"
    hmpDataDir = "${projectDir}/data"
    bundlesDir = "${hmpHomeDir}/bundles"

    springProfilesActive = ['dev', 'vpr-datastore-json', 'vpr-datastore-solr']

    // KIDS build
    kidsBuildNames = 'VPR*1.0*3'
    kidsHost = 'serverserv1.innovations.domain'
    kidsPort = 9060
    kidsPath = '/srv/aviva/share/build/'
    kidsCredentials = '10vehu;vehu10'
    kidsFilePrefix = 'VPR1_3_'
    kidsFileSuffix = '.KID'

    hmpServerId = getHmpServerId()
}
ext['hmp.server.id'] = hmpServerId

configurations {
    systemBundle
    termdb
    termdbjlv
    solr
}

dependencies {
    compile project(":production:hmp-api")
    compile project(":production:health-time:health-time-core")
    compile project(":production:health-time:health-time-jackson")
    compile project(":production:vista-support:vista-rpc-client")
    compile project(":production:vista-support:vista-auth")
    compile project(":production:vista-support:vista-rpc-client-metrics")

    compile group: 'domain.med', name: 'JMeadowsDataService', version: '2.3.0.7'
    compile group: 'us.vistacore.vler', name: 'nhinadapterdoc', version: '1.0.0'

    compile('com.netflix.hystrix:hystrix-core:1.3.13')
    compile('com.netflix.hystrix:hystrix-metrics-event-stream:1.3.13')
    compile('com.netflix.hystrix:hystrix-request-servlet:1.3.13')

    // TODO how to exclude these from the project jar? Verify they are included in the first place!
    /*
    compile ("gov.va.hmp:vista-rpc-client:0.9.14") {
        exclude(module: 'org.springframework.core')
        exclude(module: 'org.springframework.beans')
        exclude(module: 'org.springframework.context')
        exclude(module: 'org.springframework.transaction')
    }
    */
    /*
    compile ("gov.va.hmp:vista-auth:0.9.14") {
        exclude(module: 'org.springframework.web.servlet')
        exclude(module: 'org.springframework.security.core')
        exclude(module: 'org.springframework.security.config')
        exclude(module: 'org.springframework.security.web')
        exclude(module: 'jcl-over-slf4j')
    }
    */
    compile("commons-beanutils:commons-beanutils:1.8.3")
    compile("commons-lang:commons-lang:2.6")
    compile("commons-logging:commons-logging:99-empty")

    compile("commons-codec:commons-codec:1.4")
    compile("com.google.guava:guava:14.0.1")
    compile("com.google.code.gson:gson:2.2.4")
    compile("org.apache.httpcomponents:httpclient:4.2") {
        exclude(module: 'commons-codec')
    }
    compile("org.apache.httpcomponents:httpcore:4.2")
    compile("org.apache.httpcomponents:httpmime:4.2")
    compile("org.apache.xbean:xbean-spring:3.7")

    compile("org.apache.poi:poi:3.10-FINAL")
    compile("org.apache.poi:poi-ooxml:3.10-FINAL")


    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: versions.groovyVersion
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.48'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3'
    compile group: 'net.sf.ehcache', name: 'ehcache-core', version: '2.6.0'
    compile(group: 'org.springframework.security', name: 'spring-security-core', version: versions.springSecurityVersion) {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework.security', name: 'spring-security-config', version: versions.springSecurityVersion
    compile group: 'org.springframework.security', name: 'spring-security-web', version: versions.springSecurityVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonVersion
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: versions.jacksonVersion
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-smile', version: versions.jacksonVersion
    compile group: 'dom4j', name: 'dom4j', version: '1.6.1'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.7.3'
    compile(group: 'org.apache.solr', name: 'solr-solrj', version: versions.solrLuceneVersion) {
        exclude(module: 'log4j')
        exclude(module: 'httpclient')
        exclude(module: 'httpcore')
        exclude(module: 'httpmime')
    }
    compile group: 'joda-time', name: 'joda-time', version: '2.2'
    compile(group: 'org.springframework.ws', name: 'spring-ws', version: '2.1.0.RELEASE', classifier: 'all') {
        exclude(module: 'commons-logging')
    }
    compile(group: 'org.springframework.ws', name: 'spring-xml', version: '2.1.0.RELEASE') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework', name: 'spring-jdbc', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-jms', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-oxm', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-orm', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-tx', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-web', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-webmvc', version: versions.springVersion
    compile group: 'org.springframework', name: 'spring-context-support', version: versions.springVersion
    compile group: 'org.springframework.data', name: 'spring-data-commons-core', version: '1.4.1.RELEASE'
    compile group: 'org.apache.activemq', name: 'activemq-broker', version: versions.activeMQVersion
    compile group: 'org.apache.activemq', name: 'activemq-client', version: versions.activeMQVersion
    compile group: 'org.apache.activemq', name: 'activemq-pool', version: versions.activeMQVersion
    compile(group: 'org.apache.activemq', name: 'activemq-spring', version: versions.activeMQVersion) {
        exclude(module: 'xbean-spring')
    }
    compile group: 'org.apache.activemq', name: 'activemq-kahadb-store', version: versions.activeMQVersion
    compile(group: 'org.apache.activemq', name: 'activemq-leveldb-store', version: versions.activeMQVersion) {
        exclude(module: 'hadoop-core')
        exclude(module: 'jackson-core-asl')
        exclude(module: 'jackson-mapper-asl')
        exclude(module: 'guava')
    }
    // needed for activemq's spring XML namespace handler
    compile group: 'org.jasypt', name: 'jasypt', version: '1.9.0'
    // OSGi interfaces
    compile group: 'org.osgi', name: 'org.osgi.core', version: versions.osgiVersion
    compile group: 'org.osgi', name: 'org.osgi.enterprise', version: versions.osgiVersion
    // Apache felix
    compile group: 'org.apache.felix', name: 'org.apache.felix.framework', version: '4.2.1', ext: 'jar'
    compile group: 'org.apache.felix', name: 'org.apache.felix.http.proxy', version: versions.felixHttpVersion
    // autodeployed system bundles
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.fileinstall', version: '3.2.6'
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.http.api', version: versions.felixHttpVersion
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.http.base', version: versions.felixHttpVersion
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.http.bridge', version: versions.felixHttpVersion
    providedCompile group: 'org.slf4j', name: 'osgi-over-slf4j', version: versions.slf4jVersion
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.configadmin', version: '1.8.0'
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.eventadmin', version: '1.3.2'
    providedCompile group: 'org.apache.felix', name: 'org.apache.felix.scr', version: '1.8.0'
    providedCompile group: 'org.apache.aries', name: 'org.apache.aries.util', version: versions.ariesVersion
    providedCompile group: 'org.apache.aries.proxy', name: 'org.apache.aries.proxy', version: '1.0.1'
    providedCompile group: 'org.apache.aries.blueprint', name: 'org.apache.aries.blueprint', version: versions.ariesVersion
    // logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4jVersion
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: versions.slf4jVersion
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: versions.slf4jVersion
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: versions.slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: versions.logbackVersion
    compile group: 'com.codahale.metrics', name: 'metrics-core', version: versions.metricsVersion
    compile group: 'com.codahale.metrics', name: 'metrics-servlets', version: versions.metricsVersion
    compile group: 'com.codahale.metrics', name: 'metrics-servlet', version: versions.metricsVersion
    compile(group: 'com.codahale.metrics', name: 'metrics-httpclient', version: versions.metricsVersion) {
        exclude(module: 'httpclient')
    }
    compile group: 'com.codahale.metrics', name: 'metrics-json', version: versions.metricsVersion
    compile group: 'com.ryantenney.metrics', name: 'metrics-spring', version: '3.0.0-RC1'

    // JDBC drivers
    runtime group: 'com.intersystems', name: 'cachejdbc', version: '2011.1.2.701'
    // messy dependancies for h2 lucene 4.x search
    compile group: 'org.apache.lucene', name: 'lucene-core', version: versions.solrLuceneVersion
    compile group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: versions.solrLuceneVersion
    compile group: 'org.apache.lucene', name: 'lucene-queryparser', version: versions.solrLuceneVersion
    // end mess
    compile group: 'org.drools', name: 'drools-core', version: versions.droolsVersion
    compile group: 'org.drools', name: 'drools-compiler', version: versions.droolsVersion
    compile(group: 'org.drools', name: 'drools-spring', version: versions.droolsVersion) {
        exclude(module: 'log4j')
    }
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    compile(group: 'org.apache.velocity', name: 'velocity-tools', version: '2.0') {
        exclude(module: 'struts-core')
        exclude(module: 'struts-taglib')
        exclude(module: 'struts-tiles')
    }
    compile group: 'com.h2database', name: 'h2', version: versions.h2Version
    // Only necessary for building new UMLS vocabulary
    compile group: 'postgresql', name: 'postgresql', version: '9.1-901.jdbc4'
    compile(group: 'org.apache.abdera', name: 'abdera-core', version: '1.1.3')
    compile(group: 'org.apache.abdera', name: 'abdera-client', version: '1.1.3')

    // compile "com.phloc:phloc-css:3.7.0"

    // TODO: include postgres, MySQL and others (MSSQL, Oracle?)
    // Provided Web Dependencies
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: versions.servletVersion
    // Testing Dependencies
    testCompile group: 'junit', name: 'junit', version: versions.junitVersion
    testCompile group: 'xmlunit', name: 'xmlunit', version: versions.xmlunitVersion
    compile group: 'org.springframework', name: 'spring-test', version: versions.springVersion
    // needs extra dependencies: objenesis & hamcrest
    testCompile group: 'org.mockito', name: 'mockito-core', version: versions.mockitoVersion
    testCompile group: 'net.sourceforge.expectj', name: 'expectj', version: '2.0.7'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: versions.hamcrestVersion
    compile group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.3.6'
    compile(group: 'com.google.javascript', name: 'closure-compiler', version: 'v20131014') {
        exclude(module: 'guava')
    }

    // TODO Ignore this statement?
    // runtime configurations.systemBundle

    tomcat group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcatVersion
    tomcat group: 'org.apache.tomcat.embed', name: 'tomcat-embed-logging-juli', version: versions.tomcatVersion
    tomcat(group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: versions.tomcatVersion) {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    termdb group: 'gov.va.hmp', name: 'termdb', version: versions.termdbVersion, classifier: 'drugdb', ext: 'zip'
    termdb group: 'gov.va.hmp', name: 'termdb', version: versions.termdbVersion, classifier: 'lncdb', ext: 'zip'
    termdb group: 'gov.va.hmp', name: 'termdb', version: versions.termdbVersion, classifier: 'sctdb', ext: 'zip'
    termdb group: 'gov.va.hmp', name: 'termdb', version: versions.termdbVersion, classifier: 'icddb', ext: 'zip'
    termdbjlv group: 'gov.va.hmp', name: 'termdb', version: versions.termdbJLVVersion, classifier: 'jlvdb', ext: 'zip'

    // TODO what is this war file for?
    solr group: 'org.apache.solr', name: 'solr', version: versions.solrLuceneVersion, ext: 'war'

}

sourceSets {
    /*
    main {
        groovy {
            srcDirs = ['scripts']
        }
    }
    */

    test {
        java {
            exclude '**/*ITCase.java'
            exclude '**/UMLSRRFDataSourceTests.java'
        }
    }
}
// put test resource and test classes in same directory
sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir

task compileCompass (type:Exec){
workingDir 'src/main/sass'
commandLine '/bin/bash', '-l', '-c', 'compass compile'

}

task cleanCompass (type:Exec){

workingDir '.'
commandLine '/bin/bash', '-l', '-c', 'compass clean'
}

processResources.inputs.files compileCompass

// new GroovyShell().run(file('scripts/splitCSS.groovy'))
// new GroovyShell().run(file('scripts/minifyJS.groovy'))

clean.dependsOn cleanCompass

// (dependsOn: 'classes')

task runSplitCSS << {
    printf "START runSplitCss\n"
    int limit = 4095;

    File cssDir = new File(project.buildDir, 'css')
    File originalCssFile = new File(cssDir, 'hmp-theme-all.css')

    CascadingStyleSheet originalCss = CSSReader.readFromFile(originalCssFile, Charset.forName("utf-8"), ECSSVersion.CSS30);
    if (originalCss == null) {
        // Most probably a syntax error
        fail("Failed to read CSS at ${originalCssFile.name} - please see previous logging entries!");
    }

    int selectorCount = 0
    originalCss.allStyleRules.each { rule ->
        selectorCount += rule.selectorCount
    }

    if (selectorCount >= limit) {
        logger.info ''
        logger.info "${originalCssFile.name} has ${selectorCount} CSS selectors: splitting file for ${limit} IE9 selector limit"

        // originalCssFile.delete()

        Map<String, CascadingStyleSheet> cascadingStyleSheets = [:]
        // List<List<ICSSTopLevelRule>> partitionedRules = partitionRules(originalCss.allRules, limit)

        List<List<ICSSTopLevelRule>> partitionedRules = [[]]
        int nestedSelectorCount = 0
        List<ICSSTopLevelRule> partition = partitionedRules[0]
        List<ICSSTopLevelRule> rules = originalCss.allRules
        rules.each { rule ->
            if (rule.hasProperty('selectorCount')) {
                if (nestedSelectorCount + rule.selectorCount > limit) {
                    partition = []
                    partitionedRules << partition
                    nestedSelectorCount = 0
                }
                nestedSelectorCount += rule.selectorCount
            }
            partition << rule
        }

        partitionedRules.eachWithIndex { List<ICSSTopLevelRule> rules2, int i ->
            CascadingStyleSheet css = new CascadingStyleSheet()
            rules2.each { css.addRule(it) }
            String filename = (i == 0 ? 'hmp-theme.css' : "hmp-theme-${i}.css")
            if (i > 0) {
                cascadingStyleSheets['hmp-theme.css'].addImportRule(new CSSImportRule(filename))
            }
            cascadingStyleSheets[filename] = css
        }

        CSSWriter writer = new CSSWriter(ECSSVersion.CSS30, true)
        cascadingStyleSheets.entrySet().each {
            File cssFile = new File(cssDir, it.key)
            if (cssFile.exists()) {
                cssFile.delete()
            }
            writer.writeCSS(it.value, new FileWriter(cssFile))
            logger.info "wrote split CSS to ${it.key}"
        }
    }
    printf "END runSplitCss\n"
}

runSplitCSS.dependsOn classes

task runMinifyJS << {
    printf "START runMinifyJS\n"

    def p = ~/.*\.js/

    Map<String, Collection<String>> requiresMap = new HashMap<String, Collection<String>>();
    Collection<String> addedClasses = new ArrayList<String>();
    Map<String, String> classToFileMap = new HashMap<String, String>();
    Map<String, String> classToTextMap = new HashMap<String, String>();
    Map<String, File> classToFSFileMap = new HashMap<String, File>();

    System.out.println("Collecting JavaScript class files...")

    // printf "project.path = ${project.path}"
    // printf project.projectDir.path
    new File(project.projectDir.path, "src/main/js").eachFileRecurse {
        if (it.name.endsWith(".js") && !it.name.startsWith("hmp-all") && !it.name.startsWith("ext-theme-hmp")) {
            String fileName = it.getName();
            FileInputStream fis = new FileInputStream(it);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));
            String txt = it.text;
            List<String> reqList = new ArrayList<String>();
            String className = null;
            String etxt = txt.toString();
            while (etxt.contains("Ext.define(") && className == null) {
                String dtxt = etxt.substring(etxt.indexOf("Ext.define(") + 11).trim();
                char strChar = dtxt.charAt(0);
                dtxt = dtxt.substring(1);
                dtxt = dtxt.substring(0, dtxt.indexOf("" + strChar));
                if (dtxt.toLowerCase().endsWith(fileName.substring(0, fileName.indexOf(".js")).toLowerCase())) {
                    className = dtxt;
                } else {
                    etxt = etxt.substring(etxt.indexOf("Ext.define(") + 11);
                }
            }
            def depFields = ['extend', 'model', 'requires', 'mixins'];
            def termMap = ['[': ']', '{': '}', "'": "'", '"': '"'];
            depFields.each {
                if (txt.contains(it)) {
                    int itl = it.length();
                    String txtPart = txt.substring(txt.indexOf(it) + itl).trim();
                    if (txtPart.startsWith(":")) {
                        txtPart = txtPart.substring(1).trim();
                        String termStr = txtPart.substring(0, 1);
                        if (termStr.equals("'") || termStr.equals("\"")) {
                            txtPart = txtPart.substring(1);
                            txtPart = txtPart.substring(0, txtPart.indexOf(termMap[termStr]));
                            if (txtPart != null && !txtPart.isEmpty() && !txtPart.equals(className) && !txtPart.startsWith("Ext")) {
                                reqList.add(txtPart);
                            }
                        } else if (termStr.equals("[") || termStr.equals("{")) {
                            txtPart = txtPart.substring(1);
                            txtPart = txtPart.substring(0, txtPart.indexOf(termMap[termStr]));
                            String[] bits = txtPart.split(",");
                            for (String bit : bits) {
                                String bitt = bit.trim();
                                if (bitt.indexOf(":") > -1) {
                                    bitt = bitt.substring(bitt.indexOf(":") + 1).trim();
                                }
                                if (bitt.length() > 2) {
                                    bitt = bitt.substring(1, bitt.length() - 1);
                                    if (!bitt.startsWith("Ext") && !txtPart.equals(className)) {
                                        reqList.add(bitt);
                                    }
                                } else {
                                    System.err.println("WARNING: Empty '" + it + "' dependency (extra comma or empty braces) found in file " + fileName);
                                }
                            }
                        }
                    }
                }
            }


            requiresMap.put(className, reqList);
            classToFileMap.put(className, fileName);
            classToTextMap.put(className, it.text);
            classToFSFileMap.put(className, it);
        }
    }

    int lastCountAC = 0;
    boolean logDependencies = false;
    TreeSet<String> failedFiles = new TreeSet<String>();

    int pass = 1;

    for (; requiresMap.keySet().size() > addedClasses.size();) {
        int countAC = addedClasses.size();
        if (countAC != 0 && countAC == lastCountAC) {
            System.out.println("Unable to further resolve dependencies! Oh no!");
            logDependencies = true;
        }
        lastCountAC = countAC;
        StringBuffer counts = new StringBuffer();
        counts.append(countAC.toString());
        counts.append("/");
        counts.append(requiresMap.keySet().size());
        System.out.println("Pass #" + (pass++) + ": Resolved count: " + counts.toString());
        for (String clz : requiresMap.keySet()) {
            if (!addedClasses.contains(clz)) {
                boolean found = false;
                ArrayList<String> required = requiresMap.get(clz);
                for (String s : required) {
                    if (!addedClasses.contains(s)) {
                        if (logDependencies) {
                            if (!requiresMap.keySet().contains(s)) {
                                failedFiles.add(s);
                            }
                        }
                        found = true;
                    }
                }
                if (!found) {
                    addedClasses.add(clz);
                }
            }
        }
        if (logDependencies) {
            break;
        }
    }
    if (!logDependencies) {

        // YUI method
        // System.out.println("Correct Ext classload dependency order:")
        StringBuffer sbuff = new StringBuffer();
        for (String s : addedClasses) {
            // System.out.println("\t"+classToFileMap.get(s));
            sbuff.append(classToTextMap.get(s));
            sbuff.append('\n')
        }
        StringReader sread = new StringReader(sbuff.toString());

        ErrorReporter errorReporter = new org.mozilla.javascript.DefaultErrorReporter();
        JavaScriptCompressor jcomp = new JavaScriptCompressor(sread, errorReporter);
        File outputDir;
        File outputMinifiedFile;
        File outputAllFile;
        try {
            // outputDir = new File(project.buildDir.path + "/" + project.build.finalName+"/js/");

            outputDir = new File(project.buildDir.path + "/js/");
            if (!outputDir.exists()) {
                outputDir.mkdirs();
            }
            outputAllFile = new File(outputDir, "hmp-all.js");
            if (!outputAllFile.exists()) {
                outputAllFile.createNewFile();
            }
            outputMinifiedFile = new File(outputDir, "hmp-all.min.js");
            if (!outputMinifiedFile.exists()) {
                outputMinifiedFile.createNewFile();
            }
        } catch (Exception) {
            File f = new File(project.projectDir.path, "src/main/js/hmp-all.js");
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile()

            f = new File(project.projectDir.path, "src/main/js/hmp-all.min.js");
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
        };

        System.out.println("Writing out to file: " + outputAllFile.canonicalPath);
        outputAllFile.write(sbuff.toString());

        System.out.println("Writing out to file: " + outputMinifiedFile.canonicalPath);
        FileWriter fileWriter = new FileWriter(outputMinifiedFile);
        jcomp.compress(fileWriter, 80, false, false, true, true);
        fileWriter.flush();
        fileWriter.close();
    } else {
        System.err.println("Couldn't add these files:")
        TreeSet<String> req = new TreeSet<String>();
        for (String s : requiresMap.keySet()) {
            if (s != null) {
                req.add(s);
            }
        }
        for (String s : addedClasses) {
            if (s != null) {
                req.remove(s);
            }
        }
        for (String s : req) {
            System.err.println(s + " = " + classToFileMap.get(s));
            for (String rs : requiresMap.keySet()) {
                if (requiresMap.get(rs).contains(s)) {
                    System.err.println("\tRequired by: " + rs);
                }
            }
        }
        throw new RuntimeException("Could not create minified JavaScript.");
    }

    printf "END runMinifyJS\n"
}

task copyJS(type: Copy) {
    from 'src/main/js'
    into "$buildDir/js"
}

war.doFirst {
    tasks.runSplitCSS.execute()
    tasks.copyJS.execute()
    tasks.runMinifyJS.execute()
}

war {
    // from ('src/main/js') {
    from("$buildDir/js") {
        into('js')
    }

    from("$buildDir/css") {
        into('css')
    }

    // webInf { from "${webAppDir}/css" }
}

task copyAndUnpackTermDatabases(type: Copy, dependsOn: [configurations.termdb, configurations.termdbjlv]) { task ->
    description = 'Copy and unpack term databases to data directory'

    into hmpDataDir
    configurations.termdb.resolve().each { File file ->
        if (file.name.endsWith(".zip")) {
            logger.info "Found zip file: " + file.name
            from(zipTree(file)) {
                logger.info "Unzipping to: " + hmpDataDir + "/" + file.name
            }
        }
    }
    logger.info "termdb State: " + configurations.termdb.state

    configurations.termdbjlv.resolve().each { File file ->
        if (file.name.endsWith(".zip")) {
            logger.info "Found zip file: " + file.name
            from(zipTree(file)) {
                logger.info "Unzipping to: " + hmpDataDir + "/" + file.name
            }
        }
    }
    logger.info "termdbjlv State: " + configurations.termdbjlv.state
}

/*
tomcatRun {
    doFirst {
        System.setProperty('logback.configurationFile', "${projectDir}/src/jetty/logback.xml")
        System.setProperty('hmp.home', hmpHomeDir)
        System.setProperty('hmp.data.dir', hmpDataDir)
    }
    contextPath = '/'
    httpPort = 8080
    httpsPort = 8443
    enableSSL = true
    keystoreFile = file('src/jetty/ssl.keystore')
    keystorePass = 'changeme'
    truststoreFile = file('src/jetty/ssl.keystore')
    truststorePass = 'changeme'
    configFile = file("${buildDir}/tomcat/tomcat-context.xml")

    additionalRuntimeJars = configurations.compile.files { dep -> dep.group == 'org.slf4j' || dep.group == 'ch.qos.logback' }
    additionalWebapps = files("${buildDir}/tomcat/webapps/solr")
//    doLast {
//        println "Hey-O!"
//        File solrWar = configurations.solr.files.iterator().next()
//        println solrWar.absolutePath
//        def context = getServer().tomcat.addWebapp(null, '/solr', solrWar.absolutePath)
//        context.unpackWAR = false
//        println "Hey-Z!"
//    }
}
*/

processResources {
    from(sourceSets.main.resources.srcDirs)
    from(sourceSets.main.resources.srcDirs) {
        include 'version.properties'
        include 'hmp-defaults.properties'
        include '**/system-packages.txt'
        // expand replaces '${' and '}' delimited tokens
        expand(nestify([
                'hmp.build.date': new Date().format('yyyy-MM-dd HH:mm:ss z'),
                'project.version': project.version,
                'termdb.drugdb.version': versions.termdbVersion,
                'termdb.sctdb.version': versions.termdbVersion,
                'termdb.lncdb.version': versions.termdbVersion,
                'termdb.icddb.version': versions.termdbVersion,
                'termdb.jlvdb.version': versions.termdbJLVVersion,
                'slf4j.version': versions.slf4jVersion,
                'spring.version': versions.springVersion
        ]))
    }
}

/*
task copyHmpConfig(type: Copy) {
    from('src/main/hmp-home') {
        include 'hmp.properties'
        include 'vista-accounts.json'
        // expand replaces '${' and '}' delimited tokens
        expand(nestify([
                'project.version': project.version,
                'hmp.server.id': hmpServerId,
                'hmp.server.port.http': hmpPortHttp.toString(),
                'hmp.server.port.https': hmpPortHttps.toString(),
                'spring.profiles.active': springProfilesActive.join(','),
                'activemq.data.dir': "${hmpDataDir}/activemq-data".toString(),
                'ehcache.disk.store.dir': "${hmpDataDir}/ehcache".toString(),
        ]))
    }
    into hmpHomeDir
}

// war.dependsOn(copyHmpConfig)

tomcatRun.dependsOn(copyHmpConfig)

task copyTomcatConfig(type: Copy) {
    from('src/jetty') {
        include 'tomcat-context.xml'
        // expand replaces '${' and '}' delimited tokens
        expand(nestify([
                'basedir': projectDir.toString(),
                'project.build.directory': buildDir.toString()
        ]))
    }
    into("${buildDir}/tomcat/")
}
tomcatRun.dependsOn(copyTomcatConfig)

task copySolrWar(type: Copy) {
    from zipTree(configurations.solr.singleFile)
    into("${buildDir}/tomcat/webapps/solr")
}
tomcatRun.dependsOn(copySolrWar)

task copyAndUnpackTermDatabases(type: Copy, dependsOn: configurations.termdb) { task ->
    description = 'Copy and unpack term databases to data directory'

    into hmpDataDir
    configurations.termdb.incoming.afterResolve { ResolvableDependencies incoming ->
        incoming.files.each { File file ->
            if (file.name.endsWith(".zip")) {
                from (zipTree(file)) {
                    into file.name - ".zip"
                }
            }
        }
    }
}
tomcatRun.dependsOn(copyAndUnpackTermDatabases)

task copySystemBundles(type: Sync) {
    description = 'Copy HMP system bundles to bundles directory'
    from configurations.systemBundle
    into bundlesDir
}
tomcatRun.dependsOn(copySystemBundles)

task runSolr {
    doLast {
        def tomcatJars = project.configurations.getByName('tomcat').asFileTree.files
        println tomcatJars
        def originalClassLoader = Thread.currentThread().contextClassLoader

        try {
            def tomcatClassLoader = new URLClassLoader(toURLArray(tomcatJars))
            Thread.currentThread().contextClassLoader = tomcatClassLoader

            def tomcat = tomcatClassLoader.loadClass('org.apache.catalina.startup.Tomcat').newInstance()
//            tomcat.engine.parentClassLoader = this.getClass().classLoader
            tomcat.port = 8080
            tomcat.baseDir = getTemporaryDir().absolutePath

            tomcat.addWebapp('/solr', configurations.solr.singleFile.absolutePath)

            tomcat.start()
            tomcat.server.await()
        } finally {
            Thread.currentThread().contextClassLoader = originalClassLoader
        }
    }
}

URL[] toURLArray(Collection<File> files) {
    List<URL> urls = new ArrayList<URL>(files.size())

    for(File file : files) {
        try {
            urls.add(file.toURI().toURL())
        }
        catch(MalformedURLException e) {
            throw new UncheckedIOException(e)
        }
    }

    urls.toArray(new URL[urls.size()]);
}
*/

String getHmpServerId() {
    File devPropsFile = file("${projectDir}/hmp-dev.properties")
    Properties devProps = new Properties()
    if (devPropsFile.exists()) {
        devPropsFile.withReader { reader ->
            devProps.load(reader)
            return devProps['hmp.server.id']
        }
    } else {
        String hmpServerId = System.getProperty('user.name') + '-development-box'
        devProps['hmp.server.id'] = hmpServerId
        devPropsFile.withWriter {
            devProps.store(it, 'HMP Development Properties')
        }
        return hmpServerId
    }
}

/**
 * Converts a map with keys using dot-syntax into nested map hiearchy
 */
Map<String, Object> nestify(Map<String, Object> m) {
    Map<String, Object> n = [:];
    m.each { entry ->
        String[] keys = entry.key.split(/\./)
        Map<String, Object> stack = n;
        keys.eachWithIndex { String key, Integer i ->
            if (i == keys.size() - 1) {
                stack[key] = entry.value
            } else {
                Map child = stack[key]
                if (child == null) {
                    child = [:]
                    stack[key] = child
                }
                stack = child
            }
        }
    }
    return n
}

task packageVPR(type: Tar) {
  compression = Compression.GZIP
  baseName = 'vpr'
  version = getVersionByCommitCountForProject(":production:hmp-main", "src/main/solr")
  destinationDir buildDir
  from "${projectDir}/src/main/solr"
}

artifacts {
  archives file: packageVPR.archivePath, name: 'vpr', type: 'tar', builtBy: packageVPR
}

task warPath {
  def folder = new File("${rootDir}/artifact_versions")
  folder.mkdirs()

  def file = new File("${rootDir}/artifact_versions/hmp_main_war.version")

  if (file.exists()) {
    file.delete()
  }
  
  file.write("${rootDir}/production/hmp-main/build/libs/hmp-main-${version}.war")
}
