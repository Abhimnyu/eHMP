allprojects  {
    apply plugin: 'maven'
    apply plugin: 'eclipse'

    if (project.hasProperty("verbose")) {
        tasks.withType(Test) {
            testLogging.showStandardStreams = true

            // listen to events in the test execution lifecycle
            beforeTest { descriptor ->
                logger.lifecycle(":" + descriptor)
            }
        }
    }

    // TODO find out which one is correct. groupId or group? version?
    ext.set('groupId', 'us.vistacore.adk')
    group = 'us.vistacore.adk'
    // how to set project version?
    version = '0.7-S51-SNAPSHOT'

    ext.set('repoCommitCount', '0.0.0.0')
    ext.set('commitCountDir', projectDir)

    def repoCommitCountClosure = {
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            return "cmd /C git rev-list --full-history --all ${->commitCountDir} | wc -l".execute().text.trim()
        }
          else {
            def proc1 = ['sh', '-c', "git rev-list --full-history --all ${->commitCountDir}"].execute()
            def proc2 = 'wc -l'.execute()
            proc1 | proc2
            return proc2.text.trim()
        }
    }

    repoCommitCount = "${->repoCommitCountClosure()}"

    // setup
    ext.set('repo', 'releases')
    ext.set('repoVersion', getRepoVersion())
    ext.set('branchName', getCurrentBranchName())
    ext.set('currentCommitHash', getCurrentCommitHash())
    version = "${->repoVersion + '.' + repoCommitCount}"

    repositories {
        mavenCentral()
    }

    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }
}


def getRepoVersion() {
    def v
    v = '1.2.0' 
    if (v.endsWith('.'))
        v = v.substring(0, v.length()-1)
    return v
}

def getCurrentBranchName() {
    def branchName
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        branchName = repoVersion + '.' + 'cmd /C git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } else {
        branchName = ['sh', '-c', 'git rev-parse --abbrev-ref HEAD'].execute().text.trim()
    }
    return branchName
}

def getCurrentCommitHash() {
    def commitHash
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commitHash = repoVersion + '.' + 'cmd /C git rev-parse HEAD'.execute().text.trim()
    } else {
        commitHash = ['sh', '-c', 'git rev-parse HEAD'].execute().text.trim()
    }
    return commitHash
}

//This function is used for getting commit count for a project
//because the allprojects routine hasn't run yet for any project other than ROOT to
//set the project.version property correctly
def getVersionByCommitCountForProject(projectString ){
    def commitCountDir = project("${projectString}").projectDir
    def proc1 = ['sh', '-c', "git rev-list --full-history --all ${->commitCountDir}"].execute()
    def proc2 = 'wc -l'.execute()
    proc1 | proc2
    version = "${getRepoVersion() + '.' + proc2.text.trim()}"
    return version
}

task generateVersionPropertiesFile() {
    doLast {
        def adkVersion = project(':production').version
        def commitHash = getCurrentCommitHash()

        println "ADK_VERSION='${adkVersion}'"
        println "COMMIT_HASH='${commitHash}'"

        project.buildDir.mkdirs()
        delete{
            delete "${project.buildDir}/version.properties"
        }
        new File("${project.buildDir}/version.properties") << """ADK_VERSION=${adkVersion}
COMMIT_HASH=${commitHash}
"""
    }
}

//trigger build
