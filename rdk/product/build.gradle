
allprojects {
  apply plugin: 'maven'

  ext.set('repo', 'releases')
  ext.set('groupId', 'us.vistacore.rdk')
  ext.set('repoVersion', getRepoVersion())
  ext.set('branchName', getCurrentBranchName())
  ext.set('currentCommitHash', getCurrentCommitHash())
  ext.set('commitCountDir', projectDir)

  def repoCommitCountClosure = {
    def proc1 = ['sh', '-c', "git rev-list --full-history --all ${->commitCountDir}"].execute()
    def proc2 = 'wc -l'.execute()
    proc1 | proc2
    return proc2.text.trim()
  }
  
  repoCommitCount = "${->repoCommitCountClosure()}"
  version = "${->repoVersion + '.' + repoCommitCount}"

  repositories {
    maven {url "https://dl.vistacore.us/nexus/content/groups/public"}
  }

  uploadArchives {
    repositories.mavenDeployer {
      pom.groupId = "${->groupId}"
      pom.version = "${->version}"
      repository(url: "https://dl.vistacore.us/nexus/content/repositories/${->repo}/") {
        authentication(userName: System.getenv()['NEXUS_USER_NAME'], password: System.getenv()['NEXUS_PASSWORD'])
      }
    }
  }
}


def getRepoVersion() {
    def v
    v = "1.3.M1"
    if (v.endsWith('.'))
        v = v.substring(0, v.length()-1)
    return v
}

def getCurrentBranchName() {
    def branchName
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        branchName = repoVersion + '.' + 'cmd /C git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } else {
        branchName = ['sh', '-c', 'git rev-parse --abbrev-ref HEAD'].execute().text.trim()
    }
    return branchName
}

def getCurrentCommitHash() {
    def commitHash
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commitHash = repoVersion + '.' + 'cmd /C git rev-parse HEAD'.execute().text.trim()
    } else {
        commitHash = ['sh', '-c', 'git rev-parse HEAD'].execute().text.trim()
    }
    return commitHash
}

task generateVersionPropertiesFile() {
    doLast {
        def rdkVersion = project(':production:rdk').version
        def commitHash = getCurrentCommitHash()

        println "RDK_VERSION='${rdkVersion}'"
        println "COMMIT_HASH='${commitHash}'"

        project.buildDir.mkdirs()
        delete{
            delete "${project.buildDir}/version.properties"
        }
        new File("${project.buildDir}/version.properties") << """RDK_VERSION=${rdkVersion}
COMMIT_HASH=${commitHash}"""
    }
}

// Fortify stuff
// Add a new configuration
configurations {
 fortify { }
}
 
// pull in the fortify libs for the new configuration
dependencies {
 fortify 'com.fortify:sourceanalyzer:4.1'
}
 
task fortifySetup << {
 ant.properties['build.compiler']='com.fortify.dev.ant.SCACompiler'
 ant.typedef(name: 'sca', classname: 'com.fortify.dev.ant.SourceanalyzerTask',
 classpath: configurations.fortify.asPath)
}
 
task fortifyReport << {

    Map<String, String> fortifyProjects = [
      'rdk': 'rdk/**/*.js'
    ]

    for (e in fortifyProjects) {
        println "Scanning: ${e.key} => ${e.value}"
        ant.sca(jdk:"1.7",
            debug:true ,
            verbose:true ,
            failonerror:true ,
            scan:true ,
            maxHeap:"4096M" ,
            logFile:file("$buildDir/reports/fortify/Fortify-${e.key}.log"),
            resultsFile:file("$buildDir/reports/fortify/${e.key}.fpr")
        ){
        fileset(dir:'production') {
            include(name:"${e.value}")
            exclude(name:'**/lib/**')
            exclude(name:'**/test/**')
            exclude(name:'**/*Test*')
            exclude(name:'**/build/**')
            }
        }
    }
}

